<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[dmiller.io]]></title>
  <link href="http://dmiller.io/atom.xml" rel="self"/>
  <link href="http://dmiller.io/"/>
  <updated>2014-01-05T11:29:56-05:00</updated>
  <id>http://dmiller.io/</id>
  <author>
    <name><![CDATA[Dan Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel on HHVM]]></title>
    <link href="http://dmiller.io/blog/2014/01/04/laravel-on-hhvm/"/>
    <updated>2014-01-04T21:05:52-05:00</updated>
    <id>http://dmiller.io/blog/2014/01/04/laravel-on-hhvm</id>
    <content type="html"><![CDATA[<p>Intrigued by the HHVM team&rsquo;s claim that Laravel&rsquo;s test suite passed 100%
when run on HHVM, I decided to get a basic Laravel application running
on HHVM.</p>

<h2>What is HHVM?</h2>

<p>First a history, lifted from <a href="http://wikipedia.org">The Great Book of the Internet</a>:</p>

<p>In the beginning PHP was not a programming language, but a set of CGI
Perl scripts used to maintain Rasmus&#8217; personal homepage. One thing lead
to another and eventually the core PHP interpreter was rewritten and
called the Zend Engine. If, like me, you&rsquo;ve always wondered what &ldquo;Zend&rdquo;
means, now you know.</p>

<p>A bunch of websites are now written in PHP. One you might have heard of
is Facebook. And Facebook, being one of the biggest websites in the
world, had a problem: how can we take all this PHP code that we have,
and make it as fast as possible?</p>

<p>The programmer in you should be jumping up and down saying &ldquo;I know! I
know! Compile it to C(++)!&rdquo; That is exactly what Facebook did with a
project they called HipHop for PHP, or HPHP for short. Using the HPHP
compiler Facebook could compile all their PHP code in to a binary, ship
it off to their servers, and massively increase their performance. In
fact, Facebook realized up to 6x the speed of Zend PHP. Awesome!</p>

<p>Unfortunately the &ldquo;ship it off to their servers&rdquo; part wasn&rsquo;t too
awesome. The compiled binary exceeded 1GB. Even worse, maintaining the
HPHP compiler as well as the needed HPHPi (development environment) and
HPHPd (debugging environment) was a significant undertaking. Perhaps the
worst problem was that HPHPc, being a compiler for an interpreted
language, could not support some of the features of PHP such as eval()
and create_function().</p>

<p>To get around this Facebook deprecated HPHPc and created a PHP virtual
machine. HHVM converts PHP code into machine readable bytecode,
similarly to the JVM. This bytecode is then translated into x64 machine
code at runtime using a just-in-time (JIT) compiler. Now Facebook
doesn&rsquo;t have a lengthy build step, and can ship only changed files to
their servers on deploy instead of a 1GB binary, while retaining the
performance advantage of HPHPc.</p>

<h2>HOW DO</h2>

<p>Sweet! Let&rsquo;s run Laravel on it.</p>

<p>I first installed HHVM on my OS X 10.9 Macbook Air, but it didn&rsquo;t seem
to work <em>quite</em> right. When I tried to access the server over HTTP it
would peg the CPU and just sit there.</p>

<p>Then I installed HHVM on my Ubuntu 13.10 x64 server, using the
<a href="https://github.com/facebook/hhvm/wiki/Building-and-installing-hhvm-on-ubuntu-13.10">instructions on the HHVM
wiki</a>
which worked beautifully. After that I ended up with the hhvm binary
located here:</p>

<pre><code>~/dev/hhvm/hphp/hhvm/hhvm
</code></pre>

<p>A clunky directory hierarchy, but whatever. Feel free to symlink it in
to /usr/local/bin if you want to make it easier to acccess.</p>

<p>Now comes the Laravel specific sauce. Taylor Otwell posted <a href="https://twitter.com/taylorotwell/status/418057634378301440">the config that he has used on Twitter</a> so I used that. Unfortunately, laravel pastebin is down at time of writing so I have mirrored it as a gist:</p>

<p>wget that down into your home directory:
(apologies for the terrible formatting, not sure what is wrong here)</p>

<div><script src='https://gist.github.com/8262454.js'></script>
<noscript><pre><code>Server {
  Port = 80
  SourceRoot = /Users/dan/hhvm-test/public/
}

VirtualHost {
 * {
   Pattern = .*
   RewriteRules {
      * {
        pattern = .?

    # app bootstrap
        to = index.php

        # append the original query string
        qsa = true
      }
   }
 }
}

StaticFile {
  Extensions {
    css = text/css
    gif = image/gif
    html = text/html
    jpe = image/jpeg
    jpeg = image/jpeg
    jpg = image/jpeg
    png = image/png
    tif = image/tiff
    tiff = image/tiff
    txt = text/plain
  }
}</code></pre></noscript></div>


<pre><code>~$ wget https://gist.github.com/jazzdan/8262454/raw/5d190c4de5252399cb421f344a789aeb56bb4ebd/config.hdf
</code></pre>

<p>Now let us get Laravel installed.</p>

<p>Install composer if you haven&rsquo;t already:</p>

<pre><code>~$ curl -sS https://getcomposer.org/installer | php
~$ sudo mv composer.phpar /usr/local/bin/composer
~$ sudo apt-get install php5-mcrypt
</code></pre>

<p>Check to make sure mcrypt is there now.</p>

<pre><code>php -m | grep mcrypt
</code></pre>

<p>Install laravel:</p>

<pre><code>~$ composer create-project laravel/laravel hhvm-test --prefer-dist
:$ cd hhvm-test
~$ composer install
</code></pre>

<p>Once that has completed you should be able to run Laravel on HHVM with
this command:</p>

<pre><code>~$ cd ~/dev/hhvm/hphp/hhvm
:$ sudo ./hhvm -m server -c  ~/config.hdf
mapping self...
mapping self took 0'00" (214686 us) wall    time
loading static content...
searching all files under source root.source..
analyzing 5 files under source root...
..loaded 25 bytes of txt firstles
loaded 25 bytes of static content in total
loading static content took 0'00" (15735 us) wall time
page server started
all servers started
</code></pre>

<p>If you see output that looks like that, then you should be good good to
go!</p>

<p>I have stepped through all of the <a href="http://laravel.com/docs/quick">Laravel
Quickstart</a> on HHVM and everything
appears to work, including MySQL database access. I&rsquo;ll report back as I
progress in to actually developing a Laravel app on it.</p>

<p>Many eyes make for shallow bugs, or so I&rsquo;m told. Please try this out on
your more developed Laravel projects and report relevant bugs to the
Laravel and HHVM teams. I envision a future in which HHVM enables
everyone to have more performant, more easily deployed PHP applications.</p>
]]></content>
  </entry>
  
</feed>
